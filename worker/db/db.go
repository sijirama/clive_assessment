package db

import (
	"fmt"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type Invoice struct {
	ID         string         `gorm:"type:uuid;primaryKey;column:id"`
	Vendor     string         `gorm:"type:varchar(255);column:vendor"`
	Amount     float64        `gorm:"type:decimal(10,2);column:amount"`
	DueDate    time.Time      `gorm:"type:date;column:due_date"`
	FileName   string         `gorm:"type:varchar(255);column:file_name"`
	RawInvoice map[string]any `gorm:"type:json;column:raw_invoice"`
	IsPaid     bool           `gorm:"type:boolean;column:is_paid"`
	PaidDate   *time.Time     `gorm:"type:date;column:paid_date"`
	CreatedAt  time.Time      `gorm:"column:created_at"`
	UpdatedAt  time.Time      `gorm:"column:updated_at"`
}

func (Invoice) TableName() string {
	return "invoices"
}

// InsightReport represents a summary report generated by the AI worker.
type InsightReport struct {
	ID                       string    `gorm:"type:uuid;primaryKey;default:uuid_generate_v4()"`
	TotalSpend               float64   `gorm:"type:decimal(10,2);not null"`
	LargestVendor            string    `gorm:"type:varchar(255);not null"`
	OverdueCount             int       `gorm:"type:integer;not null"`
	Anomalies                JSONBMap  `gorm:"type:jsonb;default:'{}'"`
	CostSavingRecommendation string    `gorm:"type:text;not null"`
	ReportDate               time.Time `gorm:"type:timestamp with time zone;not null"`
	CreatedAt                time.Time `gorm:"autoCreateTime"`
	UpdatedAt                time.Time `gorm:"autoUpdateTime"`
}

// TableName specifies the table name for the InsightReport model.
func (InsightReport) TableName() string {
	return "insight_reports"
}

func ConnectToDb() (*gorm.DB, error) {

	var err error

	dsn := "postgres://postgres:postgres@postgres:5432/insight"

	Store, err := gorm.Open(postgres.Open(dsn))

	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %v", err)
	}

	Store.AutoMigrate(&InsightReport{})

	return Store, nil
}
